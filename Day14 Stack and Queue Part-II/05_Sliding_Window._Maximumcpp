/*
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to
the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
*/

#include <bits/stdc++.h>
using namespace std;

// Using Deque and Map [TC: O(N) erase operation is O(1) amortised, AS: O(K)]
class Solution1
{
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans;
        
        // Using deque to store all elements of sliding window 
        deque<int> dq;
        // Map is used to get max value in sliding window and also to store frequency of elements (duplicates)
        map<int,int> mp;

        // Storing first k elements in deque, with their frequency
        for(int i = 0; i < k; i++){
            mp[nums[i]]++;
            dq.push_back(nums[i]);
        }

        // Max of first k elements
        auto max_iter = --mp.end();
        ans.push_back(max_iter->first);

        // for next k sized windows
        int i = k;
        while(i < n)
        {
            // Removing the leftmost element from window from deque and map 
            int front = dq.front();
            dq.pop_front();
            mp[front]--;
            if(mp[front] == 0){mp.erase(front);} // deleting entry if frequency becomes 0

            // New element added in deque and map
            dq.push_back(nums[i]);
            mp[nums[i]]++;
            i++;

            // Finding maximum of current window
            max_iter = --mp.end();
            ans.push_back(max_iter->first);
        }

        return ans;
    }
};

// Using Only Deque [TC: O(N), AS: O(N)]
class Solution2 
{
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans;

        deque<int> dq;
        // Approach: We have to maintain descending order of element in deque. *We store index of elements in dq*
        for(int i = 0; i < n; i++){
            // checking if front (index) is out of bounds of our present window
            if(!dq.empty() && dq.front() == i - k){dq.pop_front();}

            // ensuring descending order
            while(!dq.empty() && nums[dq.back()] < nums[i]){dq.pop_back();}
            
            // pushing current element
            dq.push_back(i);

            // pushing element only after k-1th index i.e. first window maximum element
            if(i >= k-1){ans.push_back(nums[dq.front()]);}
        }

        return ans;
    }
}; 